// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: creators.proto

package creatorspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Creators_MostActiveCreators_FullMethodName = "/creatorspb.Creators/MostActiveCreators"
)

// CreatorsClient is the client API for Creators service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Interface exported by the server. Note that this is an internal-facing API, so validation is not done by the server.
// Fields passed in requests should already have been validated. Additionally, validation will be done on the db layer
// when data is persisted.
type CreatorsClient interface {
	// Returns stats about the given creators, ordered by activity with the most active creator first.
	MostActiveCreators(ctx context.Context, in *MostActiveCreatorsReq, opts ...grpc.CallOption) (*MostActiveCreatorsRes, error)
}

type creatorsClient struct {
	cc grpc.ClientConnInterface
}

func NewCreatorsClient(cc grpc.ClientConnInterface) CreatorsClient {
	return &creatorsClient{cc}
}

func (c *creatorsClient) MostActiveCreators(ctx context.Context, in *MostActiveCreatorsReq, opts ...grpc.CallOption) (*MostActiveCreatorsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MostActiveCreatorsRes)
	err := c.cc.Invoke(ctx, Creators_MostActiveCreators_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreatorsServer is the server API for Creators service.
// All implementations must embed UnimplementedCreatorsServer
// for forward compatibility
//
// Interface exported by the server. Note that this is an internal-facing API, so validation is not done by the server.
// Fields passed in requests should already have been validated. Additionally, validation will be done on the db layer
// when data is persisted.
type CreatorsServer interface {
	// Returns stats about the given creators, ordered by activity with the most active creator first.
	MostActiveCreators(context.Context, *MostActiveCreatorsReq) (*MostActiveCreatorsRes, error)
	mustEmbedUnimplementedCreatorsServer()
}

// UnimplementedCreatorsServer must be embedded to have forward compatible implementations.
type UnimplementedCreatorsServer struct {
}

func (UnimplementedCreatorsServer) MostActiveCreators(context.Context, *MostActiveCreatorsReq) (*MostActiveCreatorsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MostActiveCreators not implemented")
}
func (UnimplementedCreatorsServer) mustEmbedUnimplementedCreatorsServer() {}

// UnsafeCreatorsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreatorsServer will
// result in compilation errors.
type UnsafeCreatorsServer interface {
	mustEmbedUnimplementedCreatorsServer()
}

func RegisterCreatorsServer(s grpc.ServiceRegistrar, srv CreatorsServer) {
	s.RegisterService(&Creators_ServiceDesc, srv)
}

func _Creators_MostActiveCreators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MostActiveCreatorsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorsServer).MostActiveCreators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Creators_MostActiveCreators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorsServer).MostActiveCreators(ctx, req.(*MostActiveCreatorsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Creators_ServiceDesc is the grpc.ServiceDesc for Creators service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Creators_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "creatorspb.Creators",
	HandlerType: (*CreatorsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MostActiveCreators",
			Handler:    _Creators_MostActiveCreators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "creators.proto",
}
